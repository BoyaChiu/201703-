一、指针
1、说明：
	地址:内存单元的编号；
	指针：
		内存单元的地址；
		变量的地址；
		eg:
		int i;
		&i----指针
	指针变量：
		存储变量地址的变量；
2、说明形式
	存储类型 数据类型 *指针变量名；
	eg:
	int *p; //p的数据类型 int *
	说明：
	存储类型同普通变量；
	数据类型：指针指向的内容的数据类型，而非指针本身的数据类型；
	*:说明后边的变量是指针变量；
	指针变量名：合法的标识符；
	
	eg:
	int i;
	int *p;  //野指针
	p = &i;
3、初始化
	存储类型 数据类型 *指针变量名 = 初值；
	eg:
	int i;
	int *p = &i;
4、& 和 *
	&：说明变量的地址
	*：取地址处的内容
	
	eg:
	int i = 10;
	int *p = &i;
	*p 的值是10；

5、指针运算（相同数据类型的指针）
	本质：地址的运算
	算术运算：（+ - ++ -- ）
	int i = 10;
	int *px, *py;
	px = py = &i;
	px+2 //指针向地址大的方向偏移2个int
	
	
	px+n：    px向地址大的方向偏移n个数据类型
	px-n：    px向地址小的方向偏移n个数据类型
	px++：    px向地址大的方向偏移1个数据类型
	px--:     px向地址小的方向偏移1个数据类型
	
	
	关系运算：(> < >= <= == !=)
	if(NULL == px)
	
	练习:
	int a[10] = {1,2,3,4,5,6,7,8,9,10};
	
	赋值运算：
	int i;
	int *px,*py;
	px = &i;
	py = px;
	
	int a[10];
	int *p = &a[0]; 等价 int *p = a;
	
二、指针与一维数组
	eg:
	int a[10];
	int *p = a;
	
	结论：
	a[i] <==> p[i] <==>*(a+i) <==> *(p+i)

三、结构体
	1、说明形式：
	struct 结构体名{
	
		成员变量；
	
	}；
	
	注意：
	struct不能省略；
	结构体名符合合法的标识符，可省略
	
	2、结构体的使用
	eg:
	struct student{
		int id;
		char name[100];
		float score;
		char sex;
	};
	
	初始化：
	
	struct student stu = {1，"xiaoming",89.5, 'm'}; 
	student :结构体名
	stu:结构体变量名
	
	访问结构体成员变量：
	方法：结构体变量名.成员变量
	stu.id
	stu.score
	stu.sex










	
	
	
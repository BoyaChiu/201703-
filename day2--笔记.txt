										C语言
一、基本知识
	1、词法符号
		1> 关键字：（32个）
		存储类型：auto(自动存储) static(静态)  register（寄存器） extern（声明一个外部的全局变量） 
		eg:
		int a; 等价 auto int a;
		
		static修饰的变量：系统只初始化一次，上一次的值可以作为下一次值的依据；
		
		register int b;//变量b的存储类型是register，所以说变量b存放在寄存器中
		
		注意：
		gcc 编译器编译文件时：
		用法：gcc 文件名 -o 可执行文件名
		eg:
		gcc static.c -o static
		
		32bit系统：
		数据类型：
		基本数据类型：signed unsigned int(4byte) short(2byte) long(4byte) float(4byte) double(8byte) char(1byte) enum(枚举)
		构造数据类型：struct(结构体) union（联合体）
		空类型：void (一般用来说明函数没有返回值或者是说明指针是指向任一类型的指针)
		eg:
		void add(int a, int b);//函数声明
		void *p;//定义了一个不确定数据类型的指针变量p
		
		控制语句：if else switch case default break for do while continue goto
		
		其他：return  typedef（取别名）volatile（修饰的变量有可能会被隐含的改变）const（修饰的变量是只读变量）
		      sizeof(运算符)
		注意：
			所有关键字都是小写
			  
		
		2> 标识符
		由程序员根据命名规则自己定义的，用来说明一个变量的名称或者是函数的名称等；
		
		命名规则：
		不能与关键字重名
		由一个或者是多个字母、数字、下划线组成
		不能以数字开头
		
		eg:
		a(√)  a_2b（√） c-5d(×) 5e(×) sizeof(×) Default（√）
		
		3> 运算符
		算术运算符：（+ - * / % ++ --）
		
		eg:
		%: 12 % 7 值为 5
		注意:
		%两边的运算量一定整数
		
		++：
		int a = 1;
		int b = a++; //后加时先引用变量的值，再自加  a++的值是1， a的值是2， b的值是1
		
		int c = 1;
		int d = ++c; //先加时先变量自加1，再引用  ++c的值是2， c的值是2， d的值是2
		
		关系运算符（>  <  >=  <=  ==  !=）
		
		逻辑运算符（&&  ||  ！）
		0：假
		1：真
		
		非0即真
		
		eg:
		int a = 1,b = 2;
		--a && b++; //执行完表达式后，a的值是0，b的值是2
		
		int c = 1, d = 2;
		c++ || ++d;//执行完表达式后，c的值是2，d的值是2
		
		注意：
		&& ||都会短路
		
		位运算符（&  |  ~  ^  >>  <<）
		注意：
		位运算两边的运算量在运算之前，一定要化成二进制数；
		
		^:
		1 ^ 2;//值为3
		
		<<：高位移出去的舍掉，低位补0
		>>:
		无符号：左边补0，右边移除的舍掉
		有符号：左边补符号位，右边移除的舍掉
		符号位为0：正数
		符号位为1：负数
		
		地址运算符：&
		eg:
		int a;
		&a;//&a表示的是变量a的地址
		
		sizeof() 运算符
		功能：用来求变量在内存中所占字节数
		
		用法：sizeof(变量名或者是数据类型)
		
		eg:
		int a;
		sizeof(a); //4byte  等价于sizeof(int)
		
		赋值运算符（=  +=  -=  %=  ^=  >>=）
	2、数据类型
		基本数据类型：
			整型（int short long ）
			浮点型（float double）
			字符型 （char）
			枚举（enum）
		构造数据类型：
		    结构体（struct）
			联合体（union）
			数组
		指针
		空类型（void）
	3、变量
	说明形式：
	存储类型 数据类型 变量名；
	eg:
	int a;
	说明：
	存储类型：auto static register extern
	数据类型：既可以是基本数据类型，也可以是构造数据类型
	变量名：符合合法的标识符
	
	初始化：定义时给变量赋值
	存储类型 数据类型 变量名 = 值；
	eg:
	int a = 10;
	
	4、变量的作用域和生命周期
	局部变量：
		作用域：模块内
		生命周期：从定义开始，到模块结束
		
	全局变量：
		作用域：整个程序
		生命周期：从定义开始，到程序结束
	static 变量：
		局部变量：
			作用域：模块内
			生命周期：从定义开始，到程序结束
		全局变量：
			作用域：整个程序
			生命周期：从定义开始，到程序结束
			
	注意：
	static修饰的全局变量只能在本文件中使用，不能用extern 声明；
二、控制语句
	1、分支语句
	if~else
	
	三种：
	简单形式：
	     if(表达式) 语句块；
	阶梯形式：
		if(表达式1)
			语句1；
		 else if(表达式2)
			语句2；
			else if(表达式3)
				语句3；
				......
					else
						语句n;
	嵌套形式：
		if(表达式)
		{
			if()
			{}
			else
			{
			
			}
		
		}
		else
		{
			if()
			{}
			else{
			
			}
		}
		注意：
		else总与他上边最近的if进行配对
		
		switch~case
		
		形式:
		switch(表达式)
		{
			case 常量表达式1：语句1；break;
			case 常量表达式2：语句2；break;
			case 常量表达式3：语句3；break;
			....
			default: 语句n;break(可省略)
		}
		
		注意：
		多个case可以执行一条语句;
		case后边没有break时，如果switch 中表达式的值与case 后边的常量表达式配对成功，则执行完case后边的
		语句后，继续执行下个case后边的语句，直到遇到break或者是default跳出switch语句；
		
	
	2、循环语句
		for循环

		形式：
		for（表达式1；表达式2；表达式3）
		{
			语句块；
		}
		
		执行过程：
		先执行表达式1，再去判断表达式2，如果表达式2的值为真，则执行语句块，接着执行表达式3，
		继续判断表达式2的值，依次循环，直到表达式2的值为假，跳出循环；
		
		注意：
		表达式1可以被省略，但是再for 之前要赋初值；
		表达式2也可以被省略，系统默认表达式2的值永久为真，形成死循环；
		表达式3也可以被省略，变量的变化体现在循环体中；
		
		表达式后边的 ； 绝对不可以省略；
		
		死循环：for(;;);
		
		while循环
		
		形式：while(表达式){语句块}
		
		执行过程：
		循环判断表达式的值是否为真，如果为真，则执行语句块，否则，跳出while循环
		
		do~while 循环
		
		形式：
		do{
		
			语句块；
		}while(表达式)；
		
		执行过程：
		先执行语句块，再去判断表达式的值；
		
		while 和 do~while 的区别：
			while是先判断再执行，而do~while是先执行再判断；
			do~while至少执行一次语句块；
三、数组
	一维数组：
	
	说明形式：
		存储类型 数据类型 数组名[元素个数];
		说明：
		存储类型：auto static extern 
		数据类型：数组中各个元素的数据类型；
		数组名：符合合法的标识符；
		元素个数：整数或者是常量表达式；
		数组名是数组首元素的地址；
		数组元素下标从0开始；
		数组在内存中占字节数 = 元素个数*sizeof（数据类型） ；或者是sizeof(a)
		数组在内存中存储时顺序存储；
		数组名是地址常量，不能做左值；
		eg:
		int a[6];
		a++; //a = a+1;(×)
		
		10 = 12;(×)
		
		eg:
		int a[10]; //a <==>&a[0]
		a的数据类型：int [10]
	初始化:
	eg:
		int a[6];
		不初始化：系统为每个元素赋随机值
		全部初始化：
		int a[6] = {1,2,3,4,5,6}; //a[0]值为1， a[5]值为6
		部分初始化：未赋值的元素系统赋0
		int a[6] = {1,2,3,4}; //a[4]、a[5]的值为0
		static 数组：
		如果数组元素没有被赋值，系统自动为每个元素赋0；
		static int a[6];
		
		int a[] = {1,2,3,4,5};//数组a的长度时5；
		
	一维字符数组：
	char ch[5] = {'h','e','l','l','o'};
	char ch1[6] = "hello";
	
	注意：
	字符串赋值时，系统自动在字符串末尾加'\0',所以，数组的长度一定要大于字符串的长度；
	eg:
	char ch2[5] = "hello";
	char ch3[] = "hello";//ch3的长度是6；
	
	二维数组：
		
		说明形式：
		存储类型 数据类型 数组名[行数][列数];
		
		说明：
		存储类型、数据类型 及数组名同一维数组；
		行数及列数：是整型或者是常量表达式;
		内存中所占字节数 = 行数*列数*sizeof(数据类型)；或者是sizeof(a);
		内存中存储时按行存储；
		二维数组名加1，一定偏移一行元素
		
		eg:
		int a[2][3] ;
		a+1 //偏移3个int
		
		初始化：
		按行初始化：
		int a[2][3] = {{1,2,3},{4,5,6}};
		
		逐个元素初始化：
		int a[2][3] = {1,2,3,4,5,6};

	作业：
	冒泡排序：
	int a[10] = {23,6,65,43,89,234,15,90,7,1};
		
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
		
		
		
		
			
		
		
		
		
		
		
		